# .gitlab-ci.yml
# paritytech/scripts
#

stages:
  - build
  - test
  - prod
  - publish-docker-description

variables: &default-vars
  REGISTRY_PATH: docker.io/paritytech
  REGISTRY_NAME: docker.io
  GCP_REGISTRY_PATH: europe-docker.pkg.dev/parity-build/ci-images
  GCP_REGISTRY_PATH_CI: europe-docker.pkg.dev/parity-ci-2024/ci-images
  GCP_REGISTRY_PATH_CI_CACHE: europe-docker.pkg.dev/parity-ci-2024/layers-cache
  GCP_REGISTRY_NAME: europe-docker.pkg.dev
  # BUILDAH_IMAGE is defined in group variables
  CI_IMAGE: $BUILDAH_IMAGE
  BUILDAH_COMMAND: "buildah --storage-driver overlay2"

default:
  cache: {}
  interruptible: true
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure

.build: &docker_build
  stage: build
  image: $CI_IMAGE
  rules:
    - if: $IMAGE_NAME == $CI_JOB_NAME
  tags:
    - kubernetes-parity-build

# Push to Dockerhub using buildah
.push_to_docker_hub: &push_to_docker_hub
  - export IMAGE_DATE_TAG="$CI_COMMIT_SHORT_SHA-$(date +%Y%m%d)"
  - $BUILDAH_COMMAND version
  - $BUILDAH_COMMAND build
    --format=docker
    --build-arg VCS_REF="$CI_COMMIT_SHA"
    --build-arg BUILD_DATE="$(date +%Y%m%d)"
    --build-arg REGISTRY_PATH="$REGISTRY_PATH"
    --tag "$REGISTRY_PATH/$IMAGE_NAME:$IMAGE_DATE_TAG"
    --tag "$REGISTRY_PATH/$IMAGE_NAME:latest"
    --file "dockerfiles/$IMAGE_NAME/Dockerfile" dockerfiles
  - $BUILDAH_COMMAND info
  - echo "$Docker_Hub_Pass_Parity" |
    buildah login --username "$Docker_Hub_User_Parity" --password-stdin "$REGISTRY_NAME"
  - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$IMAGE_DATE_TAG"
  - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:latest"
  - buildah logout "$REGISTRY_NAME"

.push_to_staging: &push_to_staging
  - $BUILDAH_COMMAND build
    --format=docker
    --build-arg VCS_REF="$CI_COMMIT_SHA"
    --build-arg BUILD_DATE="$(date +%Y%m%d)"
    --build-arg REGISTRY_PATH="$REGISTRY_PATH"
    --tag "$REGISTRY_PATH/$IMAGE_NAME:staging"
    --file "dockerfiles/$IMAGE_NAME/Dockerfile" dockerfiles
  - echo "$Docker_Hub_Pass_Parity" |
    buildah login --username "$Docker_Hub_User_Parity" --password-stdin "$REGISTRY_NAME"
  - $BUILDAH_COMMAND info
  - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:staging"
  - buildah logout "$REGISTRY_NAME"

.push_to_production: &push_to_production
  - export IMAGE_DATE_TAG="$CI_COMMIT_SHORT_SHA-$(date +%Y%m%d)"
  # TODO: This is racy; we should persist the image hash built by .push_to_staging in a job artifact
  #       and fetch that hash, rather than just the current state of the staging tag.
  - env REGISTRY_AUTH_FILE="" $BUILDAH_COMMAND pull "$REGISTRY_PATH/$IMAGE_NAME:staging"
  - $BUILDAH_COMMAND tag "$REGISTRY_PATH/$IMAGE_NAME:staging" "$REGISTRY_PATH/$IMAGE_NAME:production"
  - $BUILDAH_COMMAND tag "$REGISTRY_PATH/$IMAGE_NAME:staging" "$REGISTRY_PATH/$IMAGE_NAME:$IMAGE_DATE_TAG"
  - echo "$Docker_Hub_Pass_Parity" |
    buildah login --username "$Docker_Hub_User_Parity" --password-stdin "$REGISTRY_NAME"
  - $BUILDAH_COMMAND info
  - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:production"
  - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$IMAGE_DATE_TAG"
  - buildah logout "$REGISTRY_NAME"

.docker_build_only: &docker_build_only
  - $BUILDAH_COMMAND build
    --format=docker
    --build-arg VCS_REF="$CI_COMMIT_SHA"
    --build-arg BUILD_DATE="$(date +%Y%m%d)"
    --build-arg REGISTRY_PATH="$REGISTRY_PATH"
    --tag "$REGISTRY_PATH/$IMAGE_NAME:staging"
    --file "dockerfiles/$IMAGE_NAME/Dockerfile" dockerfiles

.publish-docker-image-description:
  stage: publish-docker-description
  image: paritytech/dockerhub-description
  variables:
    DOCKERHUB_REPOSITORY: paritytech/$IMAGE_NAME
    DOCKER_USERNAME: $Docker_Hub_User_Parity
    DOCKER_PASSWORD: $Docker_Hub_Pass_Parity
    README_FILEPATH: $CI_PROJECT_DIR/dockerfiles/$IMAGE_NAME/README.md
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_REF_NAME == "master"
      changes:
        - dockerfiles/$IMAGE_NAME/README.md
  script:
    - cd / && sh entrypoint.sh
  tags:
    - kubernetes-parity-build

#### stage:                        build

# Only build in PR

.docker_build_pr: &docker_build_pr
  stage: build
  image: $CI_IMAGE
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/ # PRs
      changes:
        paths:
          - dockerfiles/${IMAGE_NAME}/**
        compare_to: "master"
  script:
    - *docker_build_only
  tags:
    - kubernetes-parity-build

ansible-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "ansible"

awscli-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "awscli"

base-bin-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "base-bin"
    REGISTRY_PATH: docker.io/parity

base-ci-linux-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "base-ci-linux"

benchmarks-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "benchmarks"

bridges-ci-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "bridges-ci"

polkadotjs-cli-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "polkadotjs-cli"

ci-linux-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "ci-linux"

ci-unified-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "ci-unified"
  script:
    - source dockerfiles/$IMAGE_NAME/build-args
    - export $(cut -d= -f1 -s dockerfiles/$IMAGE_NAME/build-args)  
    - echo "$GCP_REGISTRY_KEY_CI_CACHE" |
      buildah login -u _json_key_base64 --password-stdin https://${GCP_REGISTRY_PATH_CI_CACHE}     
    - $BUILDAH_COMMAND build
      --cache-to $GCP_REGISTRY_PATH_CI_CACHE/cache
      --cache-from $GCP_REGISTRY_PATH_CI_CACHE/cache     
      --layers=true
      --format=docker
      --build-arg VCS_REF="$CI_COMMIT_SHA"
      --build-arg BUILD_DATE="$(date +%Y%m%d)"
      --build-arg REGISTRY_PATH="$REGISTRY_PATH"
      --build-arg-file dockerfiles/$IMAGE_NAME/build-args      
      --tag "$REGISTRY_PATH/$IMAGE_NAME:staging"
      --file "dockerfiles/$IMAGE_NAME/Dockerfile" dockerfiles
    - buildah logout "${GCP_REGISTRY_NAME}"      
  tags:
    - linux-docker

eng-automation-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "eng-automation-ci"

contracts-ci-linux-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "contracts-ci-linux"

github-gh-cli-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "github-gh-cli"

ink-ci-linux-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "ink-ci-linux"

ink-waterfall-ci-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "ink-waterfall-ci"

lz4-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "lz4"

mdbook-utils-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "mdbook-utils"

mitogen-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "mitogen"

molecule-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "molecule"

multisig-ci-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "multisig-ci"

node-bench-regression-guard-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "node-bench-regression-guard"

node-wrk-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "node-wrk"

parity-keyring-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "parity-keyring"

parity-scale-codec-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "parity-scale-codec"

query-exporter-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "query-exporter"

redis-exporter-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "redis-exporter"

rpm-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "rpm"

rusty-cachier-env-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "rusty-cachier-env"

sops-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "sops"

substrate-session-keys-grabber-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "substrate-session-keys-grabber"

terraform-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "terraform"

tools-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "tools"

ws-health-exporter-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "ws-health-exporter"

xbuilder-aarch64-unknown-linux-gnu-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "xbuilder-aarch64-unknown-linux-gnu"

# releng-scripts needs custom config because files are in a separate repo
releng-scripts-download-pr:
  stage: build
  image: "paritytech/ci-linux:production"
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when: on_success
    expire_in: 3 hours
    paths:
      - ./artifacts/
  variables:
    GIT_FETCH: 0
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/ # PRs
      changes:
        paths:
          - dockerfiles/releng-scripts/**
        compare_to: "master"
  script:
    - mkdir -p artifacts/
    - cd artifacts/
    - git clone https://github.com/paritytech/releng-scripts
  tags:
    - kubernetes-parity-build

releng-scripts-pr:
  <<: *docker_build_pr
  needs:
    - job: releng-scripts-download-pr
      artifacts: true
  variables:
    IMAGE_NAME: "releng-scripts"
  script:
    - mv dockerfiles/$IMAGE_NAME/Dockerfile artifacts/releng-scripts/
    - cd artifacts/releng-scripts/
    - $BUILDAH_COMMAND build
      --format=docker
      --build-arg VCS_REF="$CI_COMMIT_SHA"
      --build-arg BUILD_DATE="$(date +%Y%m%d)"
      --build-arg REGISTRY_PATH="$REGISTRY_PATH"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:staging"
      --file "Dockerfile"

db-dumper-pr:
  <<: *docker_build_pr
  variables:
    IMAGE_NAME: "db-dumper"

# Build and push to docker hub
ansible:
  <<: *docker_build
  script:
    - *push_to_docker_hub

base-bin:
  <<: *docker_build
  variables:
    REGISTRY_PATH: docker.io/parity
  script:
    - *push_to_docker_hub

base-ci-linux:
  <<: *docker_build
  script:
    - *push_to_docker_hub

ci-linux:
  <<: *docker_build
  script:
    - $BUILDAH_COMMAND build
      --format=docker
      --build-arg VCS_REF="$CI_COMMIT_SHA"
      --build-arg BUILD_DATE="$(date +%Y%m%d)"
      --build-arg REGISTRY_PATH="$REGISTRY_PATH"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:staging"
      --file "dockerfiles/$IMAGE_NAME/Dockerfile" dockerfiles
    # spin up a temporary ci-linux container to extract the tag info
    - CONTAINER_ID="$(REGISTRY_AUTH_FILE= $BUILDAH_COMMAND from --pull=false "$REGISTRY_PATH/$IMAGE_NAME:staging")"
    # VERSION_TAG=<rustc version>-<distro release codename>
    - VERSION_TAG="$($BUILDAH_COMMAND run "$CONTAINER_ID" --
      bash -c 'printf "%s-%s" "$(rustc --version | cut -d\  -f2)" "$(sed -ne "s/^VERSION_CODENAME=//p" /etc/os-release)"'
      )"
    - $BUILDAH_COMMAND rm "$CONTAINER_ID"
    - $BUILDAH_COMMAND tag "$REGISTRY_PATH/$IMAGE_NAME:staging" "$REGISTRY_PATH/$IMAGE_NAME:$VERSION_TAG"
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin "$REGISTRY_NAME"
    - $BUILDAH_COMMAND info
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:staging"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$VERSION_TAG"
    - buildah logout "$REGISTRY_NAME"

ci-unified-pr-push:
  variables:
    IMAGE_NAME: "ci-unified"
    RUST_STABLE_VERSION: "1.74.0"
    RUST_NIGHTLY_VERSION: "2023-11-01"
    REGISTRY_PATH: docker.io/paritypr
  stage: build
  image: $CI_IMAGE
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/ # PRs
      changes:
        paths:
          - dockerfiles/${IMAGE_NAME}/**
        compare_to: "master"
      when: manual
  before_script:
    - dnf install -y git
  script:
    - source dockerfiles/$IMAGE_NAME/build-args
    - export $(cut -d= -f1 -s dockerfiles/$IMAGE_NAME/build-args)  
    #
    - PR_INFO="${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}"
    - DATESTAMP=$(git log -1 --pretty=format:"%ad" --date=format:"%Y%m%d%H%M" -- dockerfiles/$IMAGE_NAME/*)
    - echo "$GCP_REGISTRY_KEY_CI_CACHE" |
      buildah login -u _json_key_base64 --password-stdin https://${GCP_REGISTRY_PATH_CI_CACHE}     
    - $BUILDAH_COMMAND build
      --cache-to $GCP_REGISTRY_PATH_CI_CACHE/cache
      --cache-from $GCP_REGISTRY_PATH_CI_CACHE/cache
      --layers=true
      --format=docker
      --build-arg VCS_REF="$CI_COMMIT_SHA"
      --build-arg BUILD_DATE="$(date +%Y%m%d)"
      --build-arg REGISTRY_PATH="$REGISTRY_PATH"
      --build-arg-file dockerfiles/$IMAGE_NAME/build-args
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$PR_INFO-$DISTRO_CODENAME-$RUST_STABLE_VERSION"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$PR_INFO-$DISTRO_CODENAME-$RUST_STABLE_VERSION-v$DATESTAMP"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$PR_INFO-$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$PR_INFO-$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION-v$DATESTAMP"
      --file "dockerfiles/$IMAGE_NAME/Dockerfile" dockerfiles
    - buildah logout "${GCP_REGISTRY_NAME}"       
    - $BUILDAH_COMMAND info
    - echo "$PARITYPR_PASS" |
      buildah login --username "$PARITYPR_USER" --password-stdin "$REGISTRY_NAME"        
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$PR_INFO-$DISTRO_CODENAME-$RUST_STABLE_VERSION"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$PR_INFO-$DISTRO_CODENAME-$RUST_STABLE_VERSION-v$DATESTAMP"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$PR_INFO-$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$PR_INFO-$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION-v$DATESTAMP"
    - buildah logout "$REGISTRY_NAME"
  retry:
    max: 2
    when:
      - always
  tags:
    - linux-docker

ci-unified:
  variables:
    RUST_STABLE_VERSION: "1.75.0"
    RUST_NIGHTLY_VERSION: "2024-01-22"
  <<: *docker_build
  before_script:
    - dnf install -y git
  script:
    - source dockerfiles/$IMAGE_NAME/build-args
    - export $(cut -d= -f1 -s dockerfiles/$IMAGE_NAME/build-args)
    #
    - DATESTAMP=$(git log -1 --pretty=format:"%ad" --date=format:"%Y%m%d%H%M" -- dockerfiles/$IMAGE_NAME/*)
    - echo "$GCP_REGISTRY_KEY_CI_CACHE" |
      buildah login -u _json_key_base64 --password-stdin https://${GCP_REGISTRY_PATH_CI_CACHE}    
    - $BUILDAH_COMMAND build
      --cache-to $GCP_REGISTRY_PATH_CI_CACHE/cache
      --cache-from $GCP_REGISTRY_PATH_CI_CACHE/cache    
      --layers=true
      --squash
      --format=docker
      --build-arg-file dockerfiles/$IMAGE_NAME/build-args      
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-v$DATESTAMP"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION-v$DATESTAMP"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:latest"
      --tag "$GCP_REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION"
      --tag "$GCP_REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-v$DATESTAMP"
      --tag "$GCP_REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION"
      --tag "$GCP_REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION-v$DATESTAMP"
      --tag "$GCP_REGISTRY_PATH/$IMAGE_NAME:latest"
      --tag "$GCP_REGISTRY_PATH_CI/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION"
      --tag "$GCP_REGISTRY_PATH_CI/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-v$DATESTAMP"
      --tag "$GCP_REGISTRY_PATH_CI/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION"
      --tag "$GCP_REGISTRY_PATH_CI/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION-v$DATESTAMP"
      --tag "$GCP_REGISTRY_PATH_CI/$IMAGE_NAME:latest"
      --file "dockerfiles/$IMAGE_NAME/Dockerfile" dockerfiles
    - buildah logout "${GCP_REGISTRY_NAME}"      
    - $BUILDAH_COMMAND info
    - echo "Pushing to $REGISTRY_NAME"
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin "$REGISTRY_NAME"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-v$DATESTAMP"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION-v$DATESTAMP"
    - >
      if [ "$SET_LATEST_TAG" == "true" ]; then
        $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:latest"
      fi
    - buildah logout "$REGISTRY_NAME"
    - echo "Pushing to $GCP_REGISTRY_NAME"
    - echo "$GCP_REGISTRY_KEY" |
      buildah login -u _json_key_base64 --password-stdin https://${GCP_REGISTRY_PATH}
    - $BUILDAH_COMMAND push --format=v2s2 "$GCP_REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION"
    - $BUILDAH_COMMAND push --format=v2s2 "$GCP_REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-v$DATESTAMP"
    - $BUILDAH_COMMAND push --format=v2s2 "$GCP_REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION"
    - $BUILDAH_COMMAND push --format=v2s2 "$GCP_REGISTRY_PATH/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION-v$DATESTAMP"
    - >
      if [ "$SET_LATEST_TAG" == "true" ]; then
        $BUILDAH_COMMAND push --format=v2s2 "$GCP_REGISTRY_PATH/$IMAGE_NAME:latest"
      fi
    - buildah logout "${GCP_REGISTRY_NAME}"
    - echo "Pushing to $GCP_REGISTRY_NAME for CI"
    - echo "$GCP_REGISTRY_KEY_CI" |
      buildah login -u _json_key_base64 --password-stdin https://${GCP_REGISTRY_PATH_CI}
    - $BUILDAH_COMMAND push --format=v2s2 "$GCP_REGISTRY_PATH_CI/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION"
    - $BUILDAH_COMMAND push --format=v2s2 "$GCP_REGISTRY_PATH_CI/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-v$DATESTAMP"
    - $BUILDAH_COMMAND push --format=v2s2 "$GCP_REGISTRY_PATH_CI/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION"
    - $BUILDAH_COMMAND push --format=v2s2 "$GCP_REGISTRY_PATH_CI/$IMAGE_NAME:$DISTRO_CODENAME-$RUST_STABLE_VERSION-$RUST_NIGHTLY_VERSION-v$DATESTAMP"
    - >
      if [ "$SET_LATEST_TAG" == "true" ]; then
        $BUILDAH_COMMAND push --format=v2s2 "$GCP_REGISTRY_PATH_CI/$IMAGE_NAME:latest"
      fi
    - buildah logout "${GCP_REGISTRY_NAME}"
  retry:
    max: 2
    when:
      - always
  tags:
    - linux-docker

ink-ci-linux:
  <<: *docker_build
  script:
    - *push_to_staging

parity-scale-codec:
  <<: *docker_build
  script:
    - *push_to_staging

ink-waterfall-ci:
  <<: *docker_build
  script:
    - *push_to_docker_hub

contracts-ci-linux:
  <<: *docker_build
  script:
    - *push_to_docker_hub

debian10:
  <<: *docker_build
  script:
    - *push_to_docker_hub

debian11:
  <<: *docker_build
  script:
    - *push_to_docker_hub

eng-automation-ci:
  <<: *docker_build
  script:
    - *push_to_docker_hub

github-gh-cli:
  <<: *docker_build
  script:
    - *push_to_docker_hub

bridges-ci:
  <<: *docker_build
  script:
    - *push_to_staging

polkadotjs-cli:
  <<: *docker_build
  script:
    - *push_to_docker_hub

awscli:
  <<: *docker_build
  script:
    - *push_to_docker_hub

tools:
  <<: *docker_build
  script:
    - *push_to_docker_hub

benchmarks:
  <<: *docker_build
  script:
    - *push_to_docker_hub

query-exporter:
  <<: *docker_build
  script:
    - *push_to_docker_hub

redis-exporter:
  <<: *docker_build
  script:
    - *push_to_docker_hub

rusty-cachier-env:
  <<: *docker_build
  script:
    - *push_to_docker_hub

mdbook-utils:
  <<: *docker_build
  script:
    - *push_to_docker_hub

mitogen:
  <<: *docker_build
  script:
    - *push_to_docker_hub

molecule:
  <<: *docker_build
  script:
    - *push_to_docker_hub

multisig-ci:
  <<: *docker_build
  script:
    - *push_to_docker_hub

node-bench-regression-guard:
  <<: *docker_build
  script:
    - *push_to_docker_hub

node-wrk:
  <<: *docker_build
  script:
    - *push_to_docker_hub

gnupg:
  <<: *docker_build
  script:
    - *push_to_docker_hub

parity-keyring:
  <<: *docker_build
  script:
    - *push_to_docker_hub

rpm:
  <<: *docker_build
  script:
    - *push_to_docker_hub

deb:
  <<: *docker_build
  script:
    - *push_to_docker_hub

lz4:
  <<: *docker_build
  script:
    - *push_to_docker_hub

ws-health-exporter:
  <<: *docker_build
  script:
    - *push_to_docker_hub

xbuilder-aarch64-unknown-linux-gnu:
  <<: *docker_build
  script:
    - *push_to_docker_hub

db-dumper:
  <<: *docker_build
  script:
    - *push_to_docker_hub

# special case as version tags are introduced
kubetools:
  <<: *docker_build
  variables:
    <<: *default-vars
    # https://github.com/kubernetes/kubernetes/releases
    BUILD_KUBE_VERSION: "1.18.2"
    # https://github.com/kubernetes/helm/releases
    # will be overwritten by the global variable at
    # https://gitlab.parity.io/groups/parity/-/settings/ci_cd
    BUILD_HELM_VERSION: "2.16.11"
  script:
    - |
      cat <<-EOT
      |
      | # build of kubetools image
      |
      | KUBE_VERSION = $BUILD_KUBE_VERSION
      | HELM_VERSION = $BUILD_HELM_VERSION
      |
      EOT
    # beware that latest is helm2, not helm3
    # TODO: helm3 should be latest
    - $BUILDAH_COMMAND build
      --format=docker
      --build-arg VCS_REF="$CI_COMMIT_SHA"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg REGISTRY_PATH="$REGISTRY_PATH"
      --build-arg KUBE_VERSION="$BUILD_KUBE_VERSION"
      --build-arg HELM_VERSION="$BUILD_HELM_VERSION"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:latest"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:helm2"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$BUILD_HELM_VERSION"
      --file "dockerfiles/$IMAGE_NAME/helm/Dockerfile" dockerfiles
    # Push to Dockerhub
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin "$REGISTRY_NAME"
    - $BUILDAH_COMMAND info
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:latest"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:helm2"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$BUILD_HELM_VERSION"
    - buildah logout "$REGISTRY_NAME"

# waits until kubetools job above is deprecated, "latest" tag remains after the old image
kubetools-helm:
  <<: *docker_build
  variables:
    <<: *default-vars
    # https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/
    KUBE_VERSION: "1.24.3"
    # https://github.com/helm/helm/releases
    HELM_VERSION: "3.14.0"
    # https://github.com/roboll/helmfile/releases
    HELMFILE_VERSION: "0.144.0"
    # https://github.com/databus23/helm-diff/releases
    HELM_DIFF_PLUGIN_VERSION: "3.5.0"
    # https://github.com/jkroepke/helm-secrets
    HELM_SECRETS_VERSION: "4.5.1"
    # https://github.com/variantdev/vals/releases
    VALS_VERSION: "0.33.0"
    # https://releases.hashicorp.com/vault/
    VAULT_VERSION: "1.15.4"
    # https://github.com/kubernetes-sigs/kustomize/releases
    KUSTOMIZE_VERSION: "4.5.7"
  script:
    - |
      cat <<-EOT
      |
      | # build of kubetools image
      |
      |
      | HELM_VERSION = $HELM_VERSION
      | HELMFILE_VERSION = $HELMFILE_VERSION
      | HELM_DIFF_PLUGIN_VERSION = $HELM_DIFF_PLUGIN_VERSION
      | HELM_SECRETS_VERSION = $HELM_SECRETS_VERSION
      | KUBE_VERSION = $KUBE_VERSION
      | VALS_VERSION = $VALS_VERSION
      | VAULT_VERSION = $VAULT_VERSION
      | KUSTOMIZE_VERSION = $KUSTOMIZE_VERSION
      |
      EOT
    - $BUILDAH_COMMAND build
      --format=docker
      --build-arg VCS_REF="$CI_COMMIT_SHA"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg REGISTRY_PATH="$REGISTRY_PATH"
      --build-arg KUBE_VERSION="$KUBE_VERSION"
      --build-arg HELM_VERSION="$HELM_VERSION"
      --build-arg HELMFILE_VERSION="$HELMFILE_VERSION"
      --build-arg HELM_DIFF_PLUGIN_VERSION="$HELM_DIFF_PLUGIN_VERSION"
      --build-arg HELM_SECRETS_VERSION="$HELM_SECRETS_VERSION"
      --build-arg VALS_VERSION="$VALS_VERSION"
      --build-arg VAULT_VERSION="$VAULT_VERSION"
      --build-arg KUSTOMIZE_VERSION="$KUSTOMIZE_VERSION"
      --tag "$REGISTRY_PATH/kubetools:helm3"
      --tag "$REGISTRY_PATH/kubetools:$HELM_VERSION"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:latest"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$HELM_VERSION"
      --file "dockerfiles/kubetools/helm/helm3.Dockerfile" dockerfiles
    # Push to Dockerhub
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin "$REGISTRY_NAME"
    - $BUILDAH_COMMAND info
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/kubetools:helm3"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/kubetools:$HELM_VERSION"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:latest"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$HELM_VERSION"
    - buildah logout "$REGISTRY_NAME"

kubetools-kubectl:
  <<: *docker_build
  variables:
    <<: *default-vars
    KUBE_VERSION: "1.26.6"
  script:
    - $BUILDAH_COMMAND build
      --format=docker
      --build-arg VCS_REF="$CI_COMMIT_SHA"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg REGISTRY_PATH="$REGISTRY_PATH"
      --build-arg KUBE_VERSION="$KUBE_VERSION"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:latest"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$KUBE_VERSION"
      --file "dockerfiles/kubetools/kubectl/Dockerfile" dockerfiles
    # Push to Dockerhub
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin "$REGISTRY_NAME"
    - $BUILDAH_COMMAND info
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:latest"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$KUBE_VERSION"
    - buildah logout "$REGISTRY_NAME"

python:
  <<: *docker_build
  variables:
    <<: *default-vars
    PYTHON_VERSION: "3.12"
    # https://releases.hashicorp.com/vault/
    VAULT_VERSION: "1.15.4"
  script:
    - |
      cat <<-EOT
      |
      | # build of python image
      |
      | VAULT_VERSION     = $VAULT_VERSION
      |
      EOT
    - $BUILDAH_COMMAND build
      --format=docker
      --build-arg VCS_REF="$CI_COMMIT_SHA"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg REGISTRY_PATH="$REGISTRY_PATH"
      --build-arg VAULT_VERSION="$VAULT_VERSION"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:latest"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$PYTHON_VERSION"
      --file "dockerfiles/$IMAGE_NAME/Dockerfile" dockerfiles
    # Push to Dockerhub
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin "$REGISTRY_NAME"
    - $BUILDAH_COMMAND info
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:latest"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$PYTHON_VERSION"
    - buildah logout "$REGISTRY_NAME"

terraform:
  <<: *docker_build
  variables:
    <<: *default-vars
    # https://releases.hashicorp.com/terraform/
    TERRAFORM_VERSION: "1.5.6"
    # https://releases.hashicorp.com/vault/
    VAULT_VERSION: "1.15.4"
  script:
    - |
      cat <<-EOT
      |
      | # build of terraform image
      |
      | TERRAFORM_VERSION = $TERRAFORM_VERSION
      | VAULT_VERSION     = $VAULT_VERSION
      |
      EOT
    - $BUILDAH_COMMAND build
      --format=docker
      --build-arg VCS_REF="$CI_COMMIT_SHA"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg REGISTRY_PATH="$REGISTRY_PATH"
      --build-arg TERRAFORM_VERSION="$TERRAFORM_VERSION"
      --build-arg VAULT_VERSION="$VAULT_VERSION"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:latest"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$TERRAFORM_VERSION"
      --file "dockerfiles/$IMAGE_NAME/Dockerfile" dockerfiles
    # Push to Dockerhub
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin "$REGISTRY_NAME"
    - $BUILDAH_COMMAND info
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:latest"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$TERRAFORM_VERSION"
    - buildah logout "$REGISTRY_NAME"

sops:
  <<: *docker_build
  variables:
    <<: *default-vars
    # https://github.com/mozilla/sops/releases/
    SOPS_VERSION: "3.7.3"
    # https://releases.hashicorp.com/vault/
    VAULT_VERSION: "1.11.2"
  script:
    - |
      cat <<-EOT
      |
      | # build of terraform image
      |
      | SOPS_VERSION      = $SOPS_VERSION
      | VAULT_VERSION     = $VAULT_VERSION
      |
      EOT
    - $BUILDAH_COMMAND build
      --format=docker
      --build-arg VCS_REF="$CI_COMMIT_SHA"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg REGISTRY_PATH="$REGISTRY_PATH"
      --build-arg SOPS_VERSION="$SOPS_VERSION"
      --build-arg VAULT_VERSION="$VAULT_VERSION"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:latest"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$SOPS_VERSION"
      --file "dockerfiles/$IMAGE_NAME/Dockerfile" dockerfiles
    # Push to Dockerhub
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin "$REGISTRY_NAME"
    - $BUILDAH_COMMAND info
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:latest"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$SOPS_VERSION"
    - buildah logout "$REGISTRY_NAME"

packer:
  <<: *docker_build
  variables:
    <<: *default-vars
    # https://releases.hashicorp.com/packer/
    PACKER_VERSION: "1.8.7"
    # https://releases.hashicorp.com/vault/
    VAULT_VERSION: "1.13.2"
  script:
    - export IMAGE_DATE_TAG="$CI_COMMIT_SHORT_SHA-$(date +%Y%m%d)"
    - |
      cat <<-EOT
      |
      | # build of packer image
      |
      | PACKER_VERSION    = $PACKER_VERSION
      | VAULT_VERSION     = $VAULT_VERSION
      |
      EOT
    - $BUILDAH_COMMAND build
      --format=docker
      --build-arg VCS_REF="$CI_COMMIT_SHA"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg REGISTRY_PATH="$REGISTRY_PATH"
      --build-arg PACKER_VERSION="$PACKER_VERSION"
      --build-arg VAULT_VERSION="$VAULT_VERSION"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:latest"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$IMAGE_DATE_TAG"
      --file "dockerfiles/$IMAGE_NAME/Dockerfile" dockerfiles
    # Push to Dockerhub
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin "$REGISTRY_NAME"
    - $BUILDAH_COMMAND info
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:latest"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$IMAGE_DATE_TAG"
    - buildah logout "$REGISTRY_NAME"

substrate-session-keys-grabber:
  <<: *docker_build
  script:
    - *push_to_docker_hub

# releng-scripts needs custom ci config because files are in a separate repo
releng-scripts-download:
  stage: build
  image: "paritytech/ci-linux:production"
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when: on_success
    expire_in: 3 hours
    paths:
      - ./artifacts/
  variables:
    GIT_FETCH: 0
  rules:
    - if: $IMAGE_NAME == "releng-scripts"
  script:
    - mkdir -p artifacts/
    - cd artifacts/
    - git clone https://github.com/paritytech/releng-scripts
  tags:
    - kubernetes-parity-build

releng-scripts:
  <<: *docker_build
  stage: prod
  needs:
    - job: releng-scripts-download
      artifacts: true
  script:
    - mv dockerfiles/$IMAGE_NAME/Dockerfile artifacts/releng-scripts/
    - cd artifacts/releng-scripts/
    - export IMAGE_DATE_TAG="$CI_COMMIT_SHORT_SHA-$(date +%Y%m%d)"
    - $BUILDAH_COMMAND build
      --format=docker
      --build-arg VCS_REF="$CI_COMMIT_SHA"
      --build-arg BUILD_DATE="$(date +%Y%m%d)"
      --build-arg REGISTRY_PATH="$REGISTRY_PATH"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:$IMAGE_DATE_TAG"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:latest"
      --file "Dockerfile"
    - $BUILDAH_COMMAND info
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin "$REGISTRY_NAME"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:$IMAGE_DATE_TAG"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:latest"
    - buildah logout "$REGISTRY_NAME"

kube-manifests-validation:
  <<: *docker_build
  variables:
    <<: *default-vars
    HELM_VERSION: "3.12.2"
    GATOR_VERSION: "3.12.0"
    DATREE_VERSION: "1.9.19"
    YQ_VERSION: "4.34.2"
    K8S_SCHEMA_VERSION: "1.25.9"
    K8S_SCHEMA_REPO_COMMIT_SHA: "a43aa7eceaf4c32c5f45c9fc477588e7a12f18b6"
    CRDS_SCHEMA_REPO_COMMIT_SHA: "8f0604e873746d6b2d49794e5b37768460e7b545"
  script:
    - $BUILDAH_COMMAND build
      --format=docker
      --build-arg VCS_REF="$CI_COMMIT_SHA"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg REGISTRY_PATH="$REGISTRY_PATH"
      --build-arg HELM_VERSION="$HELM_VERSION"
      --build-arg GATOR_VERSION="$GATOR_VERSION"
      --build-arg DATREE_VERSION="$DATREE_VERSION"
      --build-arg YQ_VERSION="$YQ_VERSION"
      --build-arg K8S_SCHEMA_VERSION="$K8S_SCHEMA_VERSION"
      --build-arg K8S_SCHEMA_REPO_COMMIT_SHA="$K8S_SCHEMA_REPO_COMMIT_SHA"
      --build-arg CRDS_SCHEMA_REPO_COMMIT_SHA="$CRDS_SCHEMA_REPO_COMMIT_SHA"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:latest"
      --tag "$REGISTRY_PATH/$IMAGE_NAME:k8s-$K8S_SCHEMA_VERSION-gator-$GATOR_VERSION-datree-$DATREE_VERSION"
      --file "dockerfiles/kube-manifests-validation/Dockerfile" dockerfiles/kube-manifests-validation
    # Push to Dockerhub
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin "$REGISTRY_NAME"
    - $BUILDAH_COMMAND info
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:latest"
    - $BUILDAH_COMMAND push --format=v2s2 "$REGISTRY_PATH/$IMAGE_NAME:k8s-$K8S_SCHEMA_VERSION-gator-$GATOR_VERSION-datree-$DATREE_VERSION"
    - buildah logout "$REGISTRY_NAME"

#### stage:                        test

container_scanning:
  # https://aquasecurity.github.io/trivy/v0.28.0/docs/integrations/gitlab-ci/
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    FULL_IMAGE_NAME: $REGISTRY_PATH/$IMAGE_NAME:$IMAGE_TAG
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy image --download-db-only
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy image --exit-code 0 --format template --template "@/contrib/gitlab.tpl"
      --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    # Prints full report
    - time trivy image --exit-code 0 "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - time trivy image --exit-code 1 --severity CRITICAL "$FULL_IMAGE_NAME"
  cache:
    # TODO: move this cache to k8s volume when it's configured
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json
  rules:
    # $IMAGE_TAG is needed for trivy. Should me mentioned in schedule's variables. I.e. latest, staging, v2.0.0.
    - if: $IMAGE_NAME || $IMAGE_TAG
  # TODO: remove when all criticals are solved
  allow_failure: true
  tags:
    - kubernetes-parity-build

ci-linux-test-substrate:
  stage: test
  variables:
    CI_IMAGE: "paritytech/ci-linux:staging"
    # this is to rewrite "-Dwarnings" we use in Substrate CI since new warnings
    # are often introduced and we do not want to fail on them in this case
    RUSTFLAGS: "-C debug-assertions"
    # disable rusty-cachier completely for this kind of pipelines
    RUSTY_CACHIER_SNEAKY_BYPASS: "true"
  rules:
    - if: $IMAGE_NAME == "ci-linux"
  trigger:
    project: parity/mirrors/substrate
    branch: master
    strategy: depend

ci-linux-test-polkadot:
  stage: test
  variables:
    CI_IMAGE: "paritytech/ci-linux:staging"
    # this is to rewrite "-Dwarnings" we use in Polkadot CI since new warnings
    # are often introduced and we do not want to fail on them in this case
    RUSTFLAGS: "-C debug-assertions"
    # disable rusty-cachier completely for this kind of pipelines
    RUSTY_CACHIER_SNEAKY_BYPASS: "true"
  rules:
    - if: $IMAGE_NAME == "ci-linux"
  trigger:
    project: parity/mirrors/polkadot
    branch: master
    strategy: depend

ink-ci-linux-test:
  stage: test
  variables:
    CI_IMAGE: "paritytech/ink-ci-linux:staging"
  rules:
    - if: $IMAGE_NAME == "ink-ci-linux"
  trigger:
    project: parity/mirrors/ink
    branch: master
    strategy: depend

bridges-ci-test:
  stage: test
  variables:
    CI_IMAGE: "paritytech/bridges-ci:staging"
  rules:
    - if: $IMAGE_NAME == "bridges-ci"
  trigger:
    project: parity/mirrors/parity-bridges-common
    branch: master
    strategy: depend

parity-scale-codec-test:
  stage: test
  variables:
    CI_IMAGE: "paritytech/parity-scale-codec:staging"
  rules:
    - if: $IMAGE_NAME == "parity-scale-codec"
  trigger:
    project: parity/mirrors/parity-scale-codec
    branch: master
    strategy: depend

#### stage:                        prod

ci-linux-production:
  stage: prod
  image: $CI_IMAGE
  rules:
    - if: $IMAGE_NAME == "ci-linux"
  script:
    - *push_to_production
  tags:
    - kubernetes-parity-build

ink-ci-linux-production: &push-after-triggered-pipeline
  stage: prod
  image: $CI_IMAGE
  needs:
    - job: ink-ci-linux-test
      artifacts: false
  rules:
    - if: $IMAGE_NAME == "ink-ci-linux"
  script:
    - *push_to_production
  tags:
    - kubernetes-parity-build

ink-ci-linux-production-manual:
  stage: prod
  image: $CI_IMAGE
  needs:
    - job: ink-ci-linux
      artifacts: false
  rules:
    - if: $IMAGE_NAME == "ink-ci-linux"
      when: manual
  script:
    - *push_to_production
  tags:
    - kubernetes-parity-build

bridges-ci-production:
  <<: *push-after-triggered-pipeline
  needs:
    - job: bridges-ci-test
      artifacts: false
  rules:
    - if: $IMAGE_NAME == "bridges-ci"

parity-scale-codec-production:
  <<: *push-after-triggered-pipeline
  needs:
    - job: parity-scale-codec-test
      artifacts: false
  rules:
    - if: $IMAGE_NAME == "parity-scale-codec"

# Publish images descriptions to hub.docker.com

publish-ansible-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: ansible
    SHORT_DESCRIPTION: "ansible utility Docker image."

publish-awscli-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: awscli
    SHORT_DESCRIPTION: "awscli utility Docker image."

publish-base-bin-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: base-bin
    DOCKERHUB_REPOSITORY: parity/base-bin
    SHORT_DESCRIPTION: "binary distribution base image."

publish-base-ci-linux-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: base-ci-linux
    SHORT_DESCRIPTION: "base-ci-linux utility Docker image."

publish-benchmarks-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: benchmarks
    SHORT_DESCRIPTION: "benchmarks utility Docker image."

publish-bridges-ci-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: bridges-ci
    SHORT_DESCRIPTION: "bridges-ci utility Docker image."

publish-ci-linux-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: ci-linux
    SHORT_DESCRIPTION: "ci-linux utility Docker image."

publish-contracts-ci-linux-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: contracts-ci-linux
    SHORT_DESCRIPTION: "contracts-ci-linux utility Docker image."

publish-deb-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: deb
    SHORT_DESCRIPTION: "deb utility Docker image."

publish-debian10-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: debian10
    SHORT_DESCRIPTION: "debian10 utility Docker image."

publish-debian11-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: debian11
    SHORT_DESCRIPTION: "debian11 utility Docker image."

publish-gnupg-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: gnupg
    SHORT_DESCRIPTION: "gnupg utility Docker image."

publish-ink-ci-linux-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: ink-ci-linux
    SHORT_DESCRIPTION: "ink-ci-linux utility Docker image."

publish-ink-waterfall-ci-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: ink-waterfall-ci
    SHORT_DESCRIPTION: "ink-waterfall-ci utility Docker image."

publish-kubetools-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: kubetools
    SHORT_DESCRIPTION: "kubetools utility Docker image."

publish-lz4-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: lz4
    SHORT_DESCRIPTION: "lz4 utility Docker image."

publish-mdbook-utils-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: mdbook-utils
    SHORT_DESCRIPTION: "mdbook-utils utility Docker image."

publish-mitogen-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: mitogen
    SHORT_DESCRIPTION: "mitogen utility Docker image."

publish-molecule-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: molecule
    SHORT_DESCRIPTION: "molecule utility Docker image."

publish-multisig-ci-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: multisig-ci
    SHORT_DESCRIPTION: "multisig-ci utility Docker image."

publish-node-bench-regression-guard-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: node-bench-regression-guard
    SHORT_DESCRIPTION: "node-bench-regression-guard utility Docker image."

publish-node-wrk-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: node-wrk
    SHORT_DESCRIPTION: "node-wrk utility Docker image."

publish-packer-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: packer
    SHORT_DESCRIPTION: "packer utility Docker image."

publish-parity-keyring-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: parity-keyring
    SHORT_DESCRIPTION: "parity-keyring utility Docker image."

publish-parity-scale-codec-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: parity-scale-codec
    SHORT_DESCRIPTION: "parity-scale-codec utility Docker image."

publish-polkadotjs-cli-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: polkadotjs-cli
    SHORT_DESCRIPTION: "polkadotjs-cli utility Docker image."

publish-query-exporter-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: query-exporter
    SHORT_DESCRIPTION: "query-exporter utility Docker image."

publish-redis-exporter-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: redis-exporter
    SHORT_DESCRIPTION: "redis-exporter utility Docker image."

publish-rpm-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: rpm
    SHORT_DESCRIPTION: "rpm utility Docker image."

publish-rusty-cachier-env-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: rusty-cachier-env
    SHORT_DESCRIPTION: "rusty-cachier-env utility Docker image."

publish-sops-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: sops
    SHORT_DESCRIPTION: "sops utility Docker image."

publish-substrate-session-keys-grabber-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: substrate-session-keys-grabber
    SHORT_DESCRIPTION: "substrate-session-keys-grabber utility Docker image."

publish-terraform-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: terraform
    SHORT_DESCRIPTION: "terraform utility Docker image."

publish-tools-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: tools
    SHORT_DESCRIPTION: " utility Docker image."

publish-ws-health-exporter-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: ws-health-exporter
    SHORT_DESCRIPTION: "ws-health-exporter utility Docker image."

publish-xbuilder-aarch64-unknown-linux-gnu-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: xbuilder-aarch64-unknown-linux-gnu
    SHORT_DESCRIPTION: "xbuilder-aarch64-unknown-linux-gnu utility Docker image."

publish-releng-scripts-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: releng-scripts
    SHORT_DESCRIPTION: "releng-scripts Docker image."

publish-eng-automation-ci-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: eng-automation-ci
    SHORT_DESCRIPTION: "Universal ci image for engineering automation team"

publish-db-dumper-docker-image-description:
  extends: .publish-docker-image-description
  variables:
    IMAGE_NAME: db-dumper
    SHORT_DESCRIPTION: "db-dumper script that makes dumps of GCP Cloud SQL Postgres databases"
